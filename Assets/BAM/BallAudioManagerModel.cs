using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]

public partial class BallAudioManagerModel

{
    [RealtimeProperty(1,true,true)]
    private float _volume;

    [RealtimeProperty(2, true, true)] 
    private float _pitch;
    
    
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class BallAudioManagerModel : RealtimeModel {
    public float volume {
        get {
            return _cache.LookForValueInCache(_volume, entry => entry.volumeSet, entry => entry.volume);
        }
        set {
            if (this.volume == value) return;
            _cache.UpdateLocalCache(entry => { entry.volumeSet = true; entry.volume = value; return entry; });
            InvalidateReliableLength();
            FireVolumeDidChange(value);
        }
    }
    
    public float pitch {
        get {
            return _cache.LookForValueInCache(_pitch, entry => entry.pitchSet, entry => entry.pitch);
        }
        set {
            if (this.pitch == value) return;
            _cache.UpdateLocalCache(entry => { entry.pitchSet = true; entry.pitch = value; return entry; });
            InvalidateReliableLength();
            FirePitchDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(BallAudioManagerModel model, T value);
    public event PropertyChangedHandler<float> volumeDidChange;
    public event PropertyChangedHandler<float> pitchDidChange;
    
    private struct LocalCacheEntry {
        public bool volumeSet;
        public float volume;
        public bool pitchSet;
        public float pitch;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Volume = 1,
        Pitch = 2,
    }
    
    public BallAudioManagerModel() : this(null) {
    }
    
    public BallAudioManagerModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireVolumeDidChange(float value) {
        try {
            volumeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePitchDidChange(float value) {
        try {
            pitchDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteFloatLength((uint)PropertyID.Volume);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Pitch);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.volumeSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.Volume);
            }
            if (entry.pitchSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.Pitch);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteFloat((uint)PropertyID.Volume, _volume);
            stream.WriteFloat((uint)PropertyID.Pitch, _pitch);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.volumeSet || entry.pitchSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.volumeSet) {
                stream.WriteFloat((uint)PropertyID.Volume, entry.volume);
                didWriteProperties = true;
            }
            if (entry.pitchSet) {
                stream.WriteFloat((uint)PropertyID.Pitch, entry.pitch);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Volume: {
                    float previousValue = _volume;
                    _volume = stream.ReadFloat();
                    bool volumeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.volumeSet);
                    if (!volumeExistsInChangeCache && _volume != previousValue) {
                        FireVolumeDidChange(_volume);
                    }
                    break;
                }
                case (uint)PropertyID.Pitch: {
                    float previousValue = _pitch;
                    _pitch = stream.ReadFloat();
                    bool pitchExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.pitchSet);
                    if (!pitchExistsInChangeCache && _pitch != previousValue) {
                        FirePitchDidChange(_pitch);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _volume = volume;
        _pitch = pitch;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
