using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

<<<<<<< HEAD

[RealtimeModel]
public partial class TimerModel 
{
    [RealtimeProperty(1, false, true)]
    private string _text;
=======
[RealtimeModel]
public partial class TimerModel
{
    [RealtimeProperty(1, true, true)]
    private double _timerCode;
>>>>>>> Ring-UI/Animation

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TimerModel : RealtimeModel {
<<<<<<< HEAD
    public string text {
        get {
            return _text;
        }
        set {
            if (_text == value) return;
            _textShouldWrite = true;
            _text = value;
            InvalidateUnreliableLength();
            FireTextDidChange(value);
=======
    public double timerCode {
        get {
            return _cache.LookForValueInCache(_timerCode, entry => entry.timerCodeSet, entry => entry.timerCode);
        }
        set {
            if (this.timerCode == value) return;
            _cache.UpdateLocalCache(entry => { entry.timerCodeSet = true; entry.timerCode = value; return entry; });
            InvalidateReliableLength();
            FireTimerCodeDidChange(value);
>>>>>>> Ring-UI/Animation
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TimerModel model, T value);
<<<<<<< HEAD
    public event PropertyChangedHandler<string> textDidChange;
    
    private bool _textShouldWrite;
    
    public enum PropertyID : uint {
        Text = 1,
=======
    public event PropertyChangedHandler<double> timerCodeDidChange;
    
    private struct LocalCacheEntry {
        public bool timerCodeSet;
        public double timerCode;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        TimerCode = 1,
>>>>>>> Ring-UI/Animation
    }
    
    public TimerModel() : this(null) {
    }
    
    public TimerModel(RealtimeModel parent) : base(null, parent) {
    }
    
<<<<<<< HEAD
    private void FireTextDidChange(string value) {
        try {
            textDidChange?.Invoke(this, value);
=======
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireTimerCodeDidChange(double value) {
        try {
            timerCodeDidChange?.Invoke(this, value);
>>>>>>> Ring-UI/Animation
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
<<<<<<< HEAD
            length += WriteStream.WriteStringLength((uint)PropertyID.Text, _text);
        } else if (context.unreliableChannel) {
            if (_textShouldWrite) {
                length += WriteStream.WriteStringLength((uint)PropertyID.Text, _text);
=======
            FlattenCache();
            length += WriteStream.WriteDoubleLength((uint)PropertyID.TimerCode);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.timerCodeSet) {
                length += WriteStream.WriteDoubleLength((uint)PropertyID.TimerCode);
>>>>>>> Ring-UI/Animation
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
<<<<<<< HEAD
            stream.WriteString((uint)PropertyID.Text, _text);
            _textShouldWrite = false;
        } else if (context.unreliableChannel) {
            if (_textShouldWrite) {
                _textShouldWrite = false;
                stream.WriteString((uint)PropertyID.Text, _text);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateUnreliableLength();
=======
            stream.WriteDouble((uint)PropertyID.TimerCode, _timerCode);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.timerCodeSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.timerCodeSet) {
                stream.WriteDouble((uint)PropertyID.TimerCode, entry.timerCode);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
>>>>>>> Ring-UI/Animation
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
<<<<<<< HEAD
                case (uint)PropertyID.Text: {
                    string previousValue = _text;
                    _text = stream.ReadString();
                    _textShouldWrite = false;
                    if (_text != previousValue) {
                        FireTextDidChange(_text);
=======
                case (uint)PropertyID.TimerCode: {
                    double previousValue = _timerCode;
                    _timerCode = stream.ReadDouble();
                    bool timerCodeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.timerCodeSet);
                    if (!timerCodeExistsInChangeCache && _timerCode != previousValue) {
                        FireTimerCodeDidChange(_timerCode);
>>>>>>> Ring-UI/Animation
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
<<<<<<< HEAD
=======
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _timerCode = timerCode;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
>>>>>>> Ring-UI/Animation
}
/* ----- End Normal Autogenerated Code ----- */
