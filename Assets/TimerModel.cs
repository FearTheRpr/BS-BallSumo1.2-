using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class TimerModel 
{
    [RealtimeProperty(1, false, true)]
    private string _text;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TimerModel : RealtimeModel {
    public string text {
        get {
            return _text;
        }
        set {
            if (_text == value) return;
            _textShouldWrite = true;
            _text = value;
            InvalidateUnreliableLength();
            FireTextDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TimerModel model, T value);
    public event PropertyChangedHandler<string> textDidChange;
    
    private bool _textShouldWrite;
    
    public enum PropertyID : uint {
        Text = 1,
    }
    
    public TimerModel() : this(null) {
    }
    
    public TimerModel(RealtimeModel parent) : base(null, parent) {
    }
    
    private void FireTextDidChange(string value) {
        try {
            textDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            length += WriteStream.WriteStringLength((uint)PropertyID.Text, _text);
        } else if (context.unreliableChannel) {
            if (_textShouldWrite) {
                length += WriteStream.WriteStringLength((uint)PropertyID.Text, _text);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteString((uint)PropertyID.Text, _text);
            _textShouldWrite = false;
        } else if (context.unreliableChannel) {
            if (_textShouldWrite) {
                _textShouldWrite = false;
                stream.WriteString((uint)PropertyID.Text, _text);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateUnreliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Text: {
                    string previousValue = _text;
                    _text = stream.ReadString();
                    _textShouldWrite = false;
                    if (_text != previousValue) {
                        FireTextDidChange(_text);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
